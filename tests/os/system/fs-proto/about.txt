
	Rules
* File clusters are 8192 bytes long or 8KiB

	Limitations
* The max size of file or folder name: 30 characters
* The max count of files for folder: 254 files/folders
* The max file size: 33292288 bytes or 31.75MiB
* The max filesystem storage: 536870912 or 512MiB

	File/Folder Entry Structure
- 0..3 => File Info
	* 0 = Folder
	* 1 = File
- 4..5 => File Size / Children Count
- 6..7 => Parent
- 8..11 => Create Datetime
- 12..15 => Modify Datetime
- 16..23 => *Reserved*
- 24..63 => OS Custom Data
- 64..8191 => Reference Data

	File Reference Data
	| 8128 bytes of fullfill content of File itself
	| 4064 16bit pointers to Clusters references

	Folder Reference Data
	| 254 30 charaters name and 16bit pointer to entry


	Partition Structure
	Cluster
	# 0 => FileSystem Program (8KiB Program)
	# 1 => Clusters Bitmap Marks
	# 2 => Clusters Counter and Ops Logger
	# 3 => FileSystem Entry (main folder)
	# 4..65535 => Free to use Clusters


===============================================================

Obs: Cluster value is a zero based index

System mapping
#0 = 0x00010000..0x00011FFF => Bitmap Marks
#1 = 0x00012000..0x00013FFF => Clusters Counter and Ops Logger


## FILE SYSTEM GENERAL FUNCTIONS

## fsSetup() -> int
## Setup File System and initializes every buffer or functionality

## fsFormat() -> int
## Format the disk partition with the file system format

## fsBusy() -> int
## Return File System is doing any busy operation


## CLUSTER FUNCTIONS

## _fsClusterLoad(cluster:int, buffer:ptr) -> int
## Request to disk to load a cluster to memory to a buffer holder

## _fsClusterSave(cluster:int, buffer:ptr) -> int
## Request to disk to save a cluster from memory in a buffer holder 

## _fsClusterAllocate(list:ptr, count:int) -> int
## Alocates a list of clusters, modifying map in memory

## _fsClusterFree(list:ptr, count:int) -> int
## Frees every cluster in a list of clusters, modifying map in memory


## FILESYSTEM OPERATIONS

## fsOpenFirstEntry(buffer:ptr) -> int
## Load entry folder to buffer entry, return 1 if requestion did

## fsOpenEntry(buffer:ptr, cluster:int) -> int
## Load entry by cluster index to buffer entry, return 1 if requestion did

## fsDirOpenChild(cbuffer:ptr, dbuffer:ptr, name:ptr) -> int
## Load entry child from directory buffer entry to child buffer entry, return 1 if requestion did

## fsDirCreateChild(buffer:ptr, info:int, name:ptr) -> int
## Create entry child in directory buffer entry, return 1 if requestion did

## fsDirRemoveChild(buffer:ptr, name:ptr) -> int
## Remove entry child in directory buffer entry, return 1 if requestion did

## fsDirRenameChild(buffer:ptr, old_name:ptr, new_name:ptr) -> int
## Rename entry child in directory buffer entry, return 1 if requestion did

## fsFileResize(buffer:ptr, clusters:int) -> int
## Resize the current file in entry buffer with clusters insertion or remotion, return 1 if requestion did

## fsFileLoadBuffer(cbuffer:ptr, fbuffer:ptr, index:int) -> int
## Load from file entry with cluster index to cluster buffer, return 1 if requestion did

## fsFileSaveBuffer(fbuffer:ptr, cbuffer:ptr, index:int) -> int
## Save cluster buffer with cluster index to file entry buffer, return 1 if requestion did



